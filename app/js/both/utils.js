// Generated by CoffeeScript 1.12.5
(function() {
  var Rect, _, cloneCanvas, deepExtend, deepMerge, getBounds, position, rotate, scale, setTransform, size, transform, translate,
    slice = [].slice;

  _ = require('lodash');

  deepExtend = function(target, source) {
    var key, targetValue, value;
    for (key in source) {
      value = source[key];
      if (_.isObject(value) && !_.isArray(value)) {
        targetValue = target[key];
        if (!_.isObject(targetValue)) {
          targetValue = {};
        }
        target[key] = deepExtend(targetValue, value);
      } else {
        target[key] = value;
      }
    }
    return target;
  };

  deepMerge = function() {
    var i, len, source, sources, target;
    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    for (i = 0, len = sources.length; i < len; i++) {
      source = sources[i];
      deepExtend(target, source);
    }
    return target;
  };

  Rect = (function() {
    function Rect(x1, y1, width1, height1) {
      this.x = x1 != null ? x1 : 0;
      this.y = y1 != null ? y1 : 0;
      this.width = width1 != null ? width1 : 0;
      this.height = height1 != null ? height1 : 0;
    }

    Rect.prototype.set = function(x1, y1, width1, height1) {
      this.x = x1 != null ? x1 : 0;
      this.y = y1 != null ? y1 : 0;
      this.width = width1 != null ? width1 : 0;
      this.height = height1 != null ? height1 : 0;
      return this;
    };

    Rect.prototype.hitTest = function(x, y) {
      var b, r;
      r = this.x + this.width;
      b = this.y + this.height;
      return x >= this.x && x <= r && y >= this.y && y <= b;
    };

    Rect.prototype.intersection = function(rect) {
      var b, b0, b1, l, r, r0, r1, t, x, y;
      r0 = this.x + this.width;
      b0 = this.y + this.height;
      x = rect.x;
      y = rect.y;
      r1 = x + rect.width;
      b1 = y + rect.height;
      l = this.x > x ? this.x : x;
      r = r0 > r1 ? r0 : r1;
      t = this.y > y ? this.y : y;
      b = b0 > b1 ? b0 : b1;
      if (l > r || t > b) {
        return 0;
      }
      return (r - l) * (b - t);
    };

    Rect.prototype.percent = function(rect) {
      return this.intersection(rect) / (this.width * this.height);
    };

    return Rect;

  })();

  getBounds = function(view, rect) {
    var br, h, l, t, vr, w;
    vr = view.getBoundingClientRect();
    br = document.body.getBoundingClientRect();
    l = vr.left - br.left;
    t = vr.top - br.top;
    w = vr.width;
    h = vr.height;
    if (!rect) {
      rect = new Rect(l, t, w, h);
    } else {
      rect.set(l, t, w, h);
    }
    return rect;
  };

  size = function(view, width, height) {
    view.style.width = width + 'px';
    return view.style.height = height + 'px';
  };

  position = function(view, x, y) {
    view.style.left = x + 'px';
    return view.style.top = y + 'px';
  };

  transform = function(view, x, y, angle, scale) {
    return setTransform(view.style, "translate(" + x + "px," + y + "px) rotate(" + angle + "deg) scale(" + scale + ")");
  };

  translate = function(view, x, y) {
    return setTransform(view.style, "translate(" + x + "px," + y + "px)");
  };

  rotate = function(view, angle) {
    return setTransform(view.style, "rotate(" + angle + "deg)");
  };

  scale = function(view, scale) {
    return setTransform(view.style, "scale(" + scale + ")");
  };

  setTransform = function(style, transform) {
    style.webkitTransform = transform;
    return style.transform = transform;
  };

  cloneCanvas = function(canvas) {
    var context, newCanvas;
    newCanvas = document.createElement('canvas');
    context = newCanvas.getContext('2d');
    newCanvas.width = canvas.width;
    newCanvas.height = canvas.height;
    context.drawImage(canvas, 0, 0);
    return newCanvas;
  };

  module.exports = {
    _: _,
    deepExtend: deepExtend,
    deepMerge: deepMerge,
    Rect: Rect,
    getBounds: getBounds,
    size: size,
    position: position,
    transform: transform,
    translate: translate,
    rotate: rotate,
    scale: scale,
    setTramsform: setTransform,
    cloneCanvas: cloneCanvas
  };

}).call(this);

//# sourceMappingURL=utils.js.map
