// Generated by CoffeeScript 1.11.1
(function() {
  var CmdMap, FS, Path, toCamelCase,
    slice = [].slice;

  FS = require('fs');

  Path = require('path');

  toCamelCase = function(value) {
    return value.replace(/-[a-z]/g, function(value) {
      return value.charAt(1).toUpperCase();
    });
  };

  CmdMap = (function() {
    function CmdMap(emitter, ctx) {
      this.emitter = emitter;
      this.ctx = ctx;
      if (!this.ctx) {
        this.ctx = this.emitter;
      }
      this.eventToCmd = {};
    }

    CmdMap.prototype.map = function(event, ctrl, target) {
      var cmd;
      if (target == null) {
        target = null;
      }
      if (this.eventToCmd[event]) {
        this.unmap(event);
      }
      if (typeof ctrl.execute === 'function') {
        cmd = function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return ctrl.execute.apply(ctrl, args);
        };
      } else if (ctrl.prototype && typeof ctrl.prototype.execute === 'function') {
        cmd = (function(_this) {
          return function() {
            var args, c;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            c = new ctrl();
            c.event = event;
            c.emitter = _this.emitter;
            c.ctx = _this.ctx;
            return c.execute.apply(c, args);
          };
        })(this);
      } else if (typeof ctrl === 'function') {
        cmd = function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return ctrl.apply(target, args);
        };
      } else {
        console.error('Error: Can not map command or callback: ', ctrl, '\n Expecting an object with an execute method, a class witch instance has an execute method or a function.');
        return;
      }
      this.emitter.on(event, cmd);
      this.eventToCmd[event] = cmd;
      return this;
    };

    CmdMap.prototype.unmap = function(event, clazz) {
      var cmd;
      cmd = this.eventToCmd[event];
      if (cmd) {
        this.emitter.removeListener(event, cmd);
        delete this.eventToCmd[event];
      }
      return this;
    };

    CmdMap.prototype.mapDir = function(dir) {
      var error, event, file, files, i, len, results;
      files = FS.readdirSync(dir);
      results = [];
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        if (/\.js$/.test(file)) {
          event = toCamelCase(Path.basename(file, '.js'));
          try {
            results.push(this.map(event, require(Path.join(dir, file))));
          } catch (error1) {
            error = error1;
            results.push(console.log('error mapping command: ', dir, file));
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return CmdMap;

  })();

  module.exports = CmdMap;

}).call(this);

//# sourceMappingURL=cmd-map.js.map
