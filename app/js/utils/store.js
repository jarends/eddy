// Generated by CoffeeScript 1.11.1
(function() {
  var FS, Store, deepMerge, utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  FS = require('fs');

  utils = require('./utils');

  deepMerge = utils.deepMerge;

  Store = (function() {
    function Store(ctx, path, def) {
      this.ctx = ctx;
      this.write = bind(this.write, this);
      this.delay = 100;
      if (path) {
        this.read(path, def);
      }
    }

    Store.prototype.get = function(path, def) {
      var i, j, key, keys, l, last, len, next, num, obj, old, value;
      keys = path.split('.');
      last = keys.pop();
      obj = this.data;
      l = keys.length;
      for (i = j = 0, len = keys.length; j < len; i = ++j) {
        key = keys[i];
        old = obj;
        obj = old[key];
        if (obj === null || obj === void 0) {
          if (i < l - 1) {
            next = keys[i + 1];
          }
          num = parseInt(next, 10);
          if (!isNaN(num) && num + '' === next) {
            old[key] = obj = [];
          } else {
            old[key] = obj = {};
          }
        }
      }
      value = obj[last];
      if (value === null || value === void 0) {
        value = obj[last] = def;
      }
      return value;
    };

    Store.prototype.set = function(path, value) {
      var i, j, key, keys, l, last, len, next, num, obj, old;
      keys = path.split('.');
      last = keys.pop();
      obj = this.data;
      l = keys.length;
      for (i = j = 0, len = keys.length; j < len; i = ++j) {
        key = keys[i];
        old = obj;
        obj = old[key];
        if (obj === null || obj === void 0) {
          if (i < l - 1) {
            next = keys[i + 1];
          }
          num = parseInt(next, 10);
          if (!isNaN(num) && num + '' === next) {
            old[key] = obj = [];
          } else {
            old[key] = obj = {};
          }
        }
      }
      if (value === null || value === void 0) {
        delete (obj[last] = value);
      } else {
        obj[last] = value;
      }
      this.update();
      return value;
    };

    Store.prototype.read = function(path1, def) {
      var data, e;
      this.path = path1;
      try {
        data = require(this.path);
      } catch (error) {
        e = error;
        this.data = deepMerge({}, def || {});
        this.write();
        return this.data;
      }
      this.data = deepMerge({}, def || {}, data || {});
      return this.data;
    };

    Store.prototype.update = function() {
      clearTimeout(this.timeout);
      this.timeout = setTimeout(this.write, this.delay);
      return null;
    };

    Store.prototype.write = function() {
      var e, json;
      if (!this.path || !this.data) {
        return null;
      }
      try {
        json = JSON.stringify(this.data);
      } catch (error) {
        e = error;
        console.log('ERROR stringifying props: ', e);
        return null;
      }
      FS.writeFile(this.path, json, function(e) {
        if (e) {
          return console.log('ERROR writing props: ', e);
        }
      });
      return null;
    };

    return Store;

  })();

  module.exports = Store;

}).call(this);

//# sourceMappingURL=store.js.map
