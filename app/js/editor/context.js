// Generated by CoffeeScript 1.11.1
(function() {
  var Blinker, Buffer, CODE, CmdMap, Coffee, Completion, Cursors, Editor, Emitter, FS, Highlighter, Indexer, KeyCtrl, MouseCtrl, Path, Renderer, Selection, State, TEST,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  FS = require('fs');

  Path = require('path');

  Emitter = require('events');

  Coffee = require("coffee-script");

  State = require('./model/state');

  Buffer = require('./model/buffer');

  Cursors = require('./model/cursors');

  Selection = require('./model/selection');

  KeyCtrl = require('./controller/key-ctrl');

  MouseCtrl = require('./controller/mouse-ctrl');

  Blinker = require('./service/blinker');

  Indexer = require('./service/indexer');

  Completion = require('./service/completion');

  Highlighter = require('./service/highlighter');

  Renderer = require('./service/renderer');

  CmdMap = require('../utils/cmd-map');

  TEST = Path.join(__dirname, '../../test');

  CODE = FS.readFileSync(Path.join(TEST, 'dom.coffee')).toString();

  Editor = (function(superClass) {
    extend(Editor, superClass);

    function Editor(view) {
      var start;
      this.view = view;
      console.log('Editor.constructor: ', this.view);
      this.init();
      start = (function(_this) {
        return function() {
          return _this.setText('coffeescript', CODE);
        };
      })(this);
      setTimeout(start, 1);
    }

    Editor.prototype.init = function() {
      if (this.initialized) {
        return;
      }
      this.initialized = true;
      this.blinker = new Blinker();
      this.cmdMap = new CmdMap(this);
      this.state = new State(this);
      this.buffer = new Buffer(this);
      this.cursors = new Cursors(this);
      this.selection = new Selection(this);
      this.indexer = new Indexer(this);
      this.completion = new Completion(this);
      this.highlighter = new Highlighter(this);
      this.renderer = new Renderer(this);
      this.keyCtrl = new KeyCtrl(this);
      this.mouseCtrl = new MouseCtrl(this);
      this.cmdMap.mapDir(Path.join(__dirname, 'commands'));
      return this;
    };

    Editor.prototype.setText = function(type, text) {
      if (this.type && this.type !== type) {
        this.dispose();
      }
      this.type = type;
      if (!this.initialized) {
        this.init();
      }
      this.updateText(text);
      return this;
    };

    Editor.prototype.setState = function(state) {
      if (this.state && this.state !== state) {
        this.dispose();
      }
      return this;
    };

    Editor.prototype.updateText = function(text) {
      console.log('Editor.updateText');
      this.buffer.updateText(text);
      return this;
    };

    Editor.prototype.dispose = function() {
      console.log('Editor.updateText');
      return this;
    };

    return Editor;

  })(Emitter);

  module.exports = Editor;

}).call(this);

//# sourceMappingURL=context.js.map
