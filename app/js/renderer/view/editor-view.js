// Generated by CoffeeScript 1.11.1
(function() {
  var DOM, Editor, EditorView,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DOM = require('../core/tree-one');

  Editor = require('../../editor/context');

  EditorView = (function(superClass) {
    extend(EditorView, superClass);

    function EditorView(props) {
      this.updateBounds = bind(this.updateBounds, this);
      EditorView.__super__.constructor.call(this, props);
    }

    EditorView.prototype.onMount = function() {
      EditorView.__super__.onMount.call(this);
      this.editor = new Editor(this.view);
      setTimeout((function(_this) {
        return function() {
          return _this.view.focus();
        };
      })(this));
      window.addEventListener('resize', this.updateBounds);
      return this;
    };

    EditorView.prototype.onWillUnmount = function() {
      EditorView.__super__.onWillUnmount.call(this);
      this.editor.dispose();
      this.editor = null;
      window.removeEventListener('resize', this.updateBounds);
      return this;
    };

    EditorView.prototype.updateBounds = function() {
      this.editor.renderer.updateBounds();
      return this;
    };

    EditorView.prototype.render = function() {
      return {
        type: 'div',
        props: {
          tabindex: 0,
          className: 'editor'
        }
      };
    };

    return EditorView;

  })(DOM.Base);

  module.exports = EditorView;

}).call(this);

//# sourceMappingURL=editor-view.js.map
