// Generated by CoffeeScript 1.12.5
(function() {
  var MouseCtrl,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MouseCtrl = (function() {
    function MouseCtrl(editor) {
      this.editor = editor;
      this.onDoubleClick = bind(this.onDoubleClick, this);
      this.onClick = bind(this.onClick, this);
      this.onMouseMove = bind(this.onMouseMove, this);
      this.onDragEnd = bind(this.onDragEnd, this);
      this.onDragMove = bind(this.onDragMove, this);
      this.onMouseDown = bind(this.onMouseDown, this);
      this.lastPos = null;
      this.dragStartPos = null;
      this.lastDragPos = null;
      this.editor.view.addEventListener('mousedown', this.onMouseDown);
      this.editor.view.addEventListener('mousemove', this.onMouseMove);
      this.editor.view.addEventListener('click', this.onClick);
      this.editor.view.addEventListener('dblclick', this.onDoubleClick);
    }

    MouseCtrl.prototype.getPos = function(event) {
      return this.editor.renderer.getPos(event);
    };

    MouseCtrl.prototype.onMouseDown = function(event) {
      this.dragStartPos = this.getPos(event);
      window.addEventListener('mousemove', this.onDragMove);
      window.addEventListener('mouseup', this.onDragEnd);
      return this;
    };

    MouseCtrl.prototype.onDragMove = function(event) {
      var dx, dy, pos;
      pos = this.getPos(event);
      if (!this.lastDragPos) {
        dx = Math.abs(pos.x - this.dragStartPos.x);
        dy = Math.abs(pos.y - this.dragStartPos.y);
        if (Math.abs(dx) > pos.w * 0.5 || Math.abs(dy) > pos.h) {
          this.lastDragPos = pos;
          console.log('startChangingSelection: ', pos.col, pos.row);
        }
      }
      if (this.lastDragPos) {
        dx = pos.col - this.lastDragPos.col;
        dy = pos.row - this.lastDragPos.row;
        if (dx || dy) {
          dx = pos.col - this.dragStartPos.col;
          dy = pos.row - this.dragStartPos.row;
          this.lastDragPos = pos;
          console.log('changeSelection: ', dx, dy);
        }
      }
      return this;
    };

    MouseCtrl.prototype.onDragEnd = function() {
      window.removeEventListener('mousemove', this.onDragMove);
      window.removeEventListener('mouseup', this.onDragEnd);
      return this;
    };

    MouseCtrl.prototype.onMouseMove = function(event) {
      var dx, dy, pos;
      if (!this.lastDragPos && event.metaKey) {
        pos = this.getPos(event);
        if (this.lastPos) {
          dx = pos.col - this.lastPos.col;
          dy = pos.row - this.lastPos.row;
          if (dx || dy) {
            console.log('current pos changed: ', pos.col, pos.row);
          }
        }
        this.lastPos = pos;
      }
      return this;
    };

    MouseCtrl.prototype.onClick = function(event) {
      if (!this.lastDragPos) {
        console.log('onClick: ', event);
      }
      this.lastDragPos = null;
      return this;
    };

    MouseCtrl.prototype.onDoubleClick = function(event) {
      if (!event.altKey) {
        console.log('onDoubleClick: ', event);
      }
      return this;
    };

    return MouseCtrl;

  })();

  module.exports = MouseCtrl;

}).call(this);

//# sourceMappingURL=mouse-ctrl.js.map
