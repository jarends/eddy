// Generated by CoffeeScript 1.12.5
(function() {
  var Cursors, List, Map, events, immutable;

  immutable = require('immutable');

  events = require('../events');

  Map = immutable.Map;

  List = immutable.List;

  Cursors = (function() {
    function Cursors(editor) {
      this.editor = editor;
      console.log('Cursors.constructor');
      this.state = this.editor.state;
      this.buffer = this.editor.buffer;
    }

    Cursors.prototype.getSize = function() {
      return this.state.get('cursors').size || 0;
    };

    Cursors.prototype.getMain = function() {
      return this.getCursor(this.state.get('mainCursor'));
    };

    Cursors.prototype.setMain = function(col, row) {
      var main;
      if (this.getSize() > 1) {
        this.removeAll();
      }
      main = this.state.get('mainCursor');
      this.state.setIn(['cursors', main, 'col'], col);
      this.state.setIn(['cursors', main, 'row'], row);
      return this;
    };

    Cursors.prototype.getCursor = function(index) {
      var cursor;
      if (index < 0 || index >= this.getSize()) {
        return null;
      }
      cursor = this.state.getIn(['cursors', index]).toJS();
      cursor.isMain = index === this.state.get('mainCursor');
      return cursor;
    };

    Cursors.prototype.addCursor = function(col, row) {
      return this;
    };

    Cursors.prototype.removeCursor = function(index) {
      return this;
    };

    Cursors.prototype.removeCursorsBetween = function(row0, col0, row1, col1) {
      return this;
    };

    Cursors.prototype.removeAll = function(exceptMain) {
      var cursors;
      if (exceptMain == null) {
        exceptMain = true;
      }
      cursors = exceptMain ? [Map(this.getMain())] : [];
      this.state.set('cursors', List(cursors));
      return this;
    };

    Cursors.prototype.move = function(dx, dy) {
      var cursors, maxCols, maxRows;
      maxCols = this.buffer.getMaxCols();
      maxRows = this.buffer.getSize();
      cursors = this.state.get('cursors');
      this.forEach((function(_this) {
        return function(cursor, index) {
          var col, row;
          col = cursor.col + dx;
          row = cursor.row + dy;
          if (col > maxCols) {
            ++row;
            col = 0;
          }
          if (col < 0) {
            --row;
            col = _this.buffer.getLineLength(row);
          }
          row = Math.min(Math.max(0, row), maxRows);
          return _this.state.setIn(['cursors', index], _this.create(col, row));
        };
      })(this));
      this.removeEqual();
      this.editor.renderer.cursorsDirty = true;
      this.editor.blinker.show();
      return this;
    };

    Cursors.prototype.create = function(col, row) {
      return Map({
        col: col,
        row: row
      });
    };

    Cursors.prototype.forEach = function(callback) {
      var cursors, i, index, ref;
      cursors = this.state.get('cursors');
      for (index = i = 0, ref = cursors.size; 0 <= ref ? i < ref : i > ref; index = 0 <= ref ? ++i : --i) {
        callback(cursors.get(index).toJS(), index);
      }
      return null;
    };

    Cursors.prototype.removeEqual = function() {
      var main, map, result;
      main = this.state.get('mainCursor');
      map = {};
      result = List();
      this.forEach(function(cursor, index) {
        var key;
        key = cursor.col + '_' + cursor.row;
        if (!map[key]) {
          if (index === main) {
            main = result.length;
          }
          cursor = Map(cursor);
          map[key] = cursor;
          return result = result.push(cursor);
        } else {
          if (index === main) {
            return main = result.indexOf(map[key]);
          }
        }
      });
      this.state.set('cursors', result);
      return this;
    };

    return Cursors;

  })();

  module.exports = Cursors;

}).call(this);

//# sourceMappingURL=cursors.js.map
