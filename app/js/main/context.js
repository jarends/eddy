// Generated by CoffeeScript 1.11.1
(function() {
  var AppMenu, BrowserWindow, Context, EventMap, Path, Post, Store, app, deepExtend, electron, utils;

  Path = require('path');

  electron = require('electron');

  EventMap = require('emap');

  Post = require('ppost');

  AppMenu = require('./app-menu');

  Store = require('../utils/store');

  utils = require('../utils/utils');

  BrowserWindow = electron.BrowserWindow;

  app = electron.app;

  deepExtend = utils.deepExtend;

  Context = (function() {
    function Context() {
      this.HOME = app.getPath('home');
      this.APP_FOLDER = Path.join(__dirname, '../../');
      this.APP_DATA = Path.join(app.getPath('userData'), 'data.json');
      this.NAME = app.getName();
      this.PKG_JSON = require(Path.join(this.APP_FOLDER, 'package.json'));
      this.DEFAULT_PROPS = {
        win: {
          x: 0,
          y: 0,
          width: 800,
          height: 600,
          backgroundColor: '#000000'
        },
        lastFolderPath: this.HOME,
        recentFiles: []
      };
      this.emap = new EventMap();
      this.emap.map(app, 'ready', this.onReady, this);
      this.emap.map(app, 'window-all-closed', this.onClose, this);
      this.emap.map(app, 'activate', this.onActivate, this);
      this.emap.map(app, 'quit', this.onQuit, this);
      this.emap.map(process, 'exit', this.terminate, this);
      this.emap.map(process, 'SIGINT', this.terminate, this);
      this.emap.map(process, 'SIGTERM', this.terminate, this);
    }

    Context.prototype.init = function() {
      this.store = new Store(this, this.APP_DATA, this.DEFAULT_PROPS);
      this.menu = new AppMenu(this);
      this.createWin();
      return null;
    };

    Context.prototype.createWin = function() {
      var opts;
      opts = deepExtend({}, this.store.data.win);
      opts.show = false;
      this.mainWin = new BrowserWindow(opts);
      this.emap.map(this.mainWin, 'ready-to-show', this.onWinReadyToShow, this);
      this.emap.map(this.mainWin, 'closed', this.onWinClosed, this);
      this.emap.map(this.mainWin, 'resize', this.onWinChanged, this);
      this.emap.map(this.mainWin, 'move', this.onWinChanged, this);
      this.mainWin.loadURL('file://' + Path.join(__dirname, '../../index.html'));
      return null;
    };

    Context.prototype.onReady = function() {
      console.log('Main.onReady');
      this.init();
      return null;
    };

    Context.prototype.onWinChanged = function() {
      deepExtend(this.store.data.win, this.mainWin.getBounds());
      this.store.update();
      return null;
    };

    Context.prototype.onWinReadyToShow = function() {
      console.log('Main.onWinReadyToShow');
      this.mainWin.show();
      return null;
    };

    Context.prototype.onWinClosed = function() {
      console.log('Main.onWinClosed');
      this.emap.unmap(this.mainWin, 'ready-to-show', this.onWinReadyToShow, this);
      this.emap.unmap(this.mainWin, 'closed', this.onWinClosed, this);
      this.emap.unmap(this.mainWin, 'resize', this.onWinChanged, this);
      this.emap.unmap(this.mainWin, 'move', this.onWinChanged, this);
      this.mainWin = null;
      return null;
    };

    Context.prototype.onActivate = function() {
      console.log('Main.onActivate');
      if (this.mainWin === null) {
        this.createWin();
      }
      return null;
    };

    Context.prototype.onClose = function() {
      console.log('Main.onClose');
      if (process.platform !== 'darwin') {
        app.quit();
      }
      return null;
    };

    Context.prototype.onQuit = function() {
      console.log('Main.onQuit');
      Post.toAll('quit');
      return null;
    };

    Context.prototype.terminate = function() {
      console.log('Main.terminate');
      return null;
    };

    return Context;

  })();

  module.exports = new Context();

}).call(this);

//# sourceMappingURL=context.js.map
